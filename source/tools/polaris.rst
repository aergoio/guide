Polaris
=======

Polaris is a server that provides node discovery for Aergo server.

For bootstrapping new nodes, the npaddpeers configuration option can be used to connect to designated peers.

However, since Aergo version 0.11, the new Polarais server has added the ability to automatically connect to nodes belonging to the specified block chain without manually creating the node list information.

Features
--------

* Aergo nodes can query addresses of other Aergo nodes. In this case, the chain of the Aergo node and the chain of Polaris must be the same.
* Aergo nodes can register itself with Polaris. Polaris checks to see if it can connect to the Aergo node and adds it to the node list.
* One Polaris server per designated block chain

Building Polaris
----------------

This section describes how to build Polaris from source without using the Docker.
Polaris is available as a sub-module in the aergo project currently in version 0.11.

1. Get the source from github.com/aergoio/aergo.
2. Build the polaris executable with :code:`make polaris`.

Runnig Polaris
--------------

Configuration
^^^^^^^^^^^^^

Four files are used to set Polaris behavior.

1. Polaris configuration file: Determines the overall operation of Polaris. It also specifies the path to other configuration related files.
2. Private key file: PK file to use for Polaris communication. It uses the same format as aergosvr's private key file.
3. Genesis file: Contains the chain information of nodes to be provided by Polaris. Use the same format as the genesis file used to initialize aergosvr.
4. Log configuration file: The file name is arglog.toml, and it uses the same format as the file used by aergosvr.

Configuration file creation and example
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create private key file
"""""""""""""""""""""""

It can be generated by aergocli using the keygen command.

::

	aergocli keygen mychain-polaris
	Wrote files mychain-polaris.{key,pub,id}.

Genesis file creation
"""""""""""""""""""""

.. code-block:: json

	{
	    "chain_id":{
	        "magic": "[insert an identifier string for your network]",
	        "public": false,
	        "mainnet": false,
	        "coinbasefee": "1000000000",
	        "consensus": "dpos"
	    },
	    "timestamp": 1548918000000000000,
	    "balance": {
	    },
	    "bps": [
	    ]
	}

Polaris configuration file
""""""""""""""""""""""""""

::

	[rpc]
	netserviceaddr = "127.0.0.1"               # RPC access address. The default setting is 127.0.0.1, which allows RPC access only on the local machine and blocks RPC connections remotely.
	netserviceport = 8915

	[p2p]
	netprotocoladdr = "[real IP address]"      # An externally accessible IP address or domain name
	netprotocolport = 8916                     
	npbindaddr = ""                  
	npkey = "mychain-polaris.key"              # Location of private key file

	[polaris]
	allowprivate = true                        # Whether to allow the private address of the node's access address. Used when building Polaris for private chains operated within a test or private network.
	genesisfile = "[location of genesis file]" # Genesis file location


Log configuration file
""""""""""""""""""""""

Refer to the `arglog documentation <../running-node/configuration.html#logging-options>`__.


Running the Polaris Server
--------------------------

Using Docker
^^^^^^^^^^^^
::

	docker run -d -w /tools -v /blockchain/polaris:/tools -p 9915:9915 -p 8915:8915 --restart="always" --name polaris-node aergo/polaris polaris --home /tools --config /tools/polaris-conf.toml

Manually
^^^^^^^^

Manually build and run the live polaris executable in the following format:

::

	./polaris --config polaris-conf.toml

Colaris
-------

Colaris is a client for Polaris RPC connection.

Building colaris
^^^^^^^^^^^^^^^^

Like Polaris, build as a sub-module of aergo.

1. Get the source from github.com/aergoio/aergo.
2. Build the executable with :code:`make colaris`.

Usage
^^^^^

It is the same interface as aergocli.

::

	./colaris [flags] <command> [[arg1]...]


Flags
"""""

1. :code:`-H <hostname>` Address to remote server when requesting. The default value is localhost (127.0.0.1)
2. :code:`-p <portnumber>` RPC port number, default is 8915

Commands
""""""""

:code:`node`: Polaris의 actor 상태를 반환한다.

:code:`current`: Polaris에 등록된 노드 목록을 반환한다.

Example:

:: 

	ubuntu@mypolaris:/blockchain/polaris$ ./colaris -p 8915 current
	{
	 "total": 1,
	 "peers": [
	  {
	   "address": {
	    "address": "52.231.31.38",
	    "port": 7846,
	    "peerID": "16Uiu2HAmBfFABqQ2eWwNMv1A2WJCqVykgPS2sz72jrYTHeZgyors"
	   },
	   "connected": 1549526282,
	   "lastCheck": 1549526463
	  }
	 ]
	}

